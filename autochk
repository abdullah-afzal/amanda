#!/bin/bash

# cd to the directory we're run from
cd `dirname $0`

die() {
    echo "$@"
    exit 1
}

[ $0 = "/bin/sh" -o $0 = "/bin/bash" ] && die "ERROR: cannot source the autochk script"

GITVER=$(git --version | { IFS=. read a b c; printf "%03d.%03d.%03d\\n" "${a##* }" $b $c; })
[ $GITVER '>' 002.000.999 ] || die "ERROR: git is too old for this build."

version_create_script=config/set_full_version

devel_cfg=./config

toplevel=$(git rev-parse --show-toplevel)

[ -d "$toplevel" ] || { pwd -P; die "ERROR: not within a repository to get version info from"; }

#
# test absolute requirements for building with submodules checked out...
#
[ -d packaging/. -a -d bitrock-stack/. -a -s bitrock-stack/install-var-subst.sh ] ||
(
    cd $toplevel;
    [ -s $toplevel/.gitmodules ] || die "ERROR: no $toplevel/.gitmodules file was found but symlinks are broken."
    git submodule deinit -f .
    rm -rf 000-external   # to be certain nothing is checked out now...
    # re-checkout the current topdir paths of the submodules
    git submodule | while read i j k; do git checkout -f $j >/dev/null 2>/dev/null; done
)

#
# reset any checkout to the detached-head form
git submodule foreach -q 'exec >/dev/null 2>&1; git symbolic-ref HEAD && git checkout HEAD@{0}; true'

git config --blob HEAD:.gitmodules --get-regex submodule'.*.branch'  |
while read modname branch; do
    modname=${modname#submodule.}; modname=${modname%.branch}; branch=${branch##*/}
    modpath=$(git config --blob HEAD:.gitmodules --get "submodule.$modname.path")
    ref="/opt/src/${modpath##*/}/.git"

    echo "module:$modname --> branch:$branch @ $modpath"
    # harmless? I suppose...
    (
        set -xv; 
        cd $toplevel;
	moddepth=
	git submodule foreach -q 'exec >/dev/null; echo "$path" || true' | grep -q "^$modpath" || moddepth="--depth 5"

        if [ -d $toplevel/.git/modules/$modname ]; then
            ( export GIT_DIR=$toplevel/.git/modules/$modname;
               git branch -D $branch >/dev/null 2>&1;
               git fetch --prune --tags origin 'refs/tags/*:refs/tags/*'
               git fetch --prune origin "+refs/heads/$branch:refs/remotes/origin/$branch"
            ) || die "ERROR: submodule $modname failed fetch";
        fi
   
        [ -d $ref ] || ref=""

        if [ ! -f $toplevel/$modpath/.git ]; then
            # first do a setup (NEEDS --init AND NO --remote!!)
            git submodule update --init --checkout ${ref:+ --reference $ref } $moddepth $modpath ||
               git submodule update --init --rebase --remote ${ref:+ --reference $ref } $moddepth $modpath
        elif ( cd $toplevel/$modpath; git diff --cached --quiet HEAD && git diff --quiet HEAD; ); then 
            # no changes to worry about...
            git submodule update --checkout ${ref:+ --reference $ref } $moddepth $modpath ||
            git submodule update --init --remote --rebase ${ref:+ --reference $ref } $moddepth $modpath
        else
            # blend in with current contents (instead of overwriting)
            git submodule update --remote --rebase ${ref:+ --reference $ref } $moddepth $modpath
        fi

    ) || die "ERROR: update failed"
done

git submodule foreach -q 'git rebase --abort 2>/dev/null || true;'
git submodule foreach -q ' \
   name1=$(git name-rev "--exclude=*/HEAD" HEAD 2>/dev/null || git name-rev HEAD 2>/dev/null); \
   name2=$(git describe --tags --exclude "*/HEAD" HEAD 2>/dev/null || git describe --all --exclude "*/HEAD" HEAD 2>/dev/null); \
   [ -z "$name2" ] && name2=$(git describe --tags HEAD 2>/dev/null || git describe --all HEAD 2>/dev/null); \
   echo "$path ---> $name1 / $name2"'

[ -s bitrock-stack/build-var-subst.sh ] || die "ERROR: cannot use bitrock-stack symlink.  submodule checkout failed."

[ -L $version_create_script ] || ln -sf ../packaging/common_z/set_zmanda_version $version_create_script

[ -d config -a -d $devel_cfg/amanda -a -d $devel_cfg/macro-archive \
       -a -d $devel_cfg/gnulib \
        -a -d $devel_cfg/gettext-macros \
        ] || \
    die "ERROR: m4 include check failed"

[ -s $version_create_script -a -L $version_create_script ] || \
    die "ERROR: cannot use $version_create_script symlink.  submodule checkout failed."

set -- awk make gcc g++ sed libtoolize \
        autoconf automake autoheader \
        swig perl bison flex gettext mailx \
        dump xinetd smbclient git tar cpio \
        strip ar base64 openssl mtx

failed=""
export PATH="$PATH:/bin:/usr/bin:/sbin:/usr/sbin"
for i do eval 'type $1 >/dev/null' $i || failed="$failed $i"; done

if [ -n "$failed" ]; then die "ERROR: failed executible tests: $failed"; fi

set -- CPAN List::Util IO::Socket::SSL Carp Data::Dumper ExtUtils::Embed 
for i do perl -e "use $i;" || failed="$failed $i"; done

if [ -n "$failed" ]; then die "ERROR: failed executible tests: $failed"; fi

SWIGVER=$(swig -version | grep -i 'version *[0-9]' | { IFS=. read a b c; printf "%03d.%03d.%03d" "${a##* }" $b $c; })
[ $SWIGVER '>' 001.999.999 ] || die "ERROR: swig is too old for this build to succeed."

[ -f /etc/debian_version ] && 
	{ grep -q '^amandabackup:' /etc/passwd || { echo "ERROR: amandabackup user (uid=63998) is not present on debian build"; exit -1; };}

exit 0
